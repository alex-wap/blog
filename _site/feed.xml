<?xml version="1.0" encoding="UTF-8"?>
<!-- Template from here: https://github.com/diverso/jekyll-rss-feeds -->
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
		<title>Emaad Ahmed Manzoor</title>
		<description>Blog of Emaad Ahmed Manzoor</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Colors of Spring</title>
				<description>&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/emaadmanzoor/33664871130/in/photostream/&quot; title=&quot;A Springy Ride&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/3/2941/33664871130_83df4f4ceb_z.jpg&quot; width=&quot;640&quot; height=&quot;360&quot; alt=&quot;A Springy Ride&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/emaadmanzoor/33664863460/in/photostream/&quot; title=&quot;Dino Pride&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/3/2939/33664863460_2ab1915a41_z.jpg&quot; width=&quot;640&quot; height=&quot;360&quot; alt=&quot;Dino Pride&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
Pittsburgh, 2017.&lt;/p&gt;
</description>
				<pubDate>Sat, 15 Apr 2017 00:00:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2017/04/15/a-springy-ride/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2017/04/15/a-springy-ride/</guid>
			</item>
		
			<item>
				<title>Modeling Disease Trajectories</title>
				<description>&lt;p&gt;My next project will (with high probability) involve modeling “disease trajectories” in some form. Though a concrete problem definition is still a few months away, I ran into some interesting recent work in this space that I will be reading soon. This post simply lists and quotes content from these papers that I found interesting. I will append to this post as I come across more.&lt;/p&gt;

&lt;h2 id=&quot;disease-trajectory-maps&quot;&gt;Disease Trajectory Maps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Peter Schulam, Raman Arora. &lt;a href=&quot;http://pschulam.com/papers/schulam+arora_nips_2016.pdf&quot;&gt;NIPS ‘16&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Peter approaches this space from the application point of view, and has a bunch of other papers in this domain since 2015:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integrative Analysis using Coupled Latent Variable Models
for Individualizing Prognoses. &lt;a href=&quot;http://pschulam.com/papers/schulam+saria_jmlr_2016.pdf&quot;&gt;JMLR ‘16.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A Framework for Individualizing Predictions of Disease
Trajectories by Exploiting Multi-Resolution Structure. &lt;a href=&quot;http://papers.nips.cc/paper/5873-a-framework-for-individualizing-predictions-of-disease-trajectories-by-exploiting-multi-resolution-structure.pdf&quot;&gt;NIPS ‘15.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Clustering Longitudinal Clinical Marker Trajectories from Electronic Health
Data: Applications to Phenotyping and Endotype Discovery. &lt;a href=&quot;http://pschulam.com/papers/schulam+wigley+saria_aaai_2015.pdf&quot;&gt;AAAI ‘15.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;His coauthor &lt;a href=&quot;http://www.suchisaria.com/&quot;&gt;Suchi Saria&lt;/a&gt; is also active in this space.
He links to an exciting commentary on &lt;a href=&quot;https://rockhealth.com/reports/predictive-analytics/&quot;&gt;predictive analytics in healthcare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The crux of &lt;a href=&quot;http://pschulam.com/papers/schulam+arora_nips_2016.pdf&quot;&gt;NIPS ‘16&lt;/a&gt; is the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] we propose the Disease Trajectory Map (DTM), a novel probabilistic model that learns low-dimensional representations of sparse and irregularly sampled longitudinal data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Sparse and irregularly sampled longitudinal data” is essentially point process data.&lt;/p&gt;

&lt;p&gt;I usually find representation-learning papers short on the evaluation front, simply because the evaluation ill-defined. A useful proxy is to use the learned representation in a machine learning task with ground truth, such as classification. The evaluation presented in this paper is does not do this and is unfamiliar to me, but I think the gist is that DTM’s corraborate what is already known medically, as shown via some hypothesis and association tests.&lt;/p&gt;

&lt;p&gt;It still appears to be a primarily exploratory technique, potentially useful as input to classifiers further down the learning pipeline. The usual skepticism of the lack statistical guarantees and robustness apply.&lt;/p&gt;

&lt;h2 id=&quot;patient-flow-prediction-via-discriminative-learning-of-mutually-correcting-processes&quot;&gt;Patient Flow Prediction via Discriminative Learning of Mutually-Correcting Processes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hongteng Xu, Weichang Wu, Shamim Nemati, and Hongyuan Zha. &lt;a href=&quot;https://arxiv.org/pdf/1602.05112.pdf&quot;&gt;TKDE ‘16&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hongteng approaches this space from the theoretical point of view. He has a bunch of earlier work on point processes with his advisor (and prolific point process expert) &lt;a href=&quot;http://www.cc.gatech.edu/~zha/&quot;&gt;Hongyuan Zha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This paper specifically is not about how diseases evolve, but on how patients move between different care units (CUs) in a medical facility.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this paper, we focus on an important problem of predicting the so-called “patient flow” from longitudinal electronic health records (EHRs). […] jointly predicting
patients’ destination CUs and duration days.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;longitudinal-mixed-membership-trajectory-models-for-disability-survey-data&quot;&gt;Longitudinal Mixed Membership Trajectory Models for Disability Survey Data&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Daniel Manrique-Vallier. &lt;a href=&quot;https://arxiv.org/pdf/1309.2324.pdf&quot;&gt;Annals of Applied Statistics, ‘14&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is pretty far removed from disease trajectory modeling, but has a nice survey that I want to peruse later. The paper essentially combines “Latent Trajectory Models”, which jointly model trajectories and clusters, and mixed memborship models, which permit soft-assignments of data points to clusters. It is easy to see its applicability to disease trajectories.&lt;/p&gt;

</description>
				<pubDate>Sun, 08 Jan 2017 00:00:00 -0500</pubDate>
				<link>http://localhost:4000/blog/2017/01/08/modeling-disease-trajectories/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2017/01/08/modeling-disease-trajectories/</guid>
			</item>
		
			<item>
				<title>Indexing Memories Better</title>
				<description>&lt;p&gt;I realised I’ve been having memory blanks in the thoughts I have on things I read,
secondary research topics, and just about anything else that does not have to do with my
primary research. The symptom manifests as this feeling that I know I had some thought(s)
about a certain matter, consequential ones that I would like to remember, but being
unable to extract that specific memory from within.&lt;/p&gt;

&lt;p&gt;So I’ve decided to write things down here before they slip away, which probably means more
frequent posts that closely resemble me on Twitter, but without the 140-character chains.&lt;/p&gt;
</description>
				<pubDate>Sat, 12 Nov 2016 00:00:00 -0500</pubDate>
				<link>http://localhost:4000/blog/2016/11/12/writing-more/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2016/11/12/writing-more/</guid>
			</item>
		
			<item>
				<title>The Elasticity of Consumption</title>
				<description>&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; I found a &lt;a href=&quot;http://web.stanford.edu/~pista/ann_rev.pdf&quot;&gt;survey&lt;/a&gt;
that addresses exactly the same questions as outlined in this post (even
categorizing shocks and responses similarly!).&lt;/p&gt;

&lt;p&gt;I am interested in how individuals respond to changes in their income. The changes may affect
periodic income, temporarily or permanently, in the form of income shocks, such as layoffs, or
be less egregious periodic income modulations such as delayed pay-days, bonuses and raises.
They may also be completely independent from periodic income, but expected, such as receiving
your tax refund. Finally, they may be completely unexpected financial windfalls, such as having
your security deposit returned by the slumlord you used to rent from in darker times.&lt;/p&gt;

&lt;p&gt;Clearly, there is heterogeneity in what income is modulated, and how this income is modulated.
I categorize effects on income as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Duration of effect: Permanent vs transient.&lt;/li&gt;
  &lt;li&gt;Direction of effect: Positive vs. negative.&lt;/li&gt;
  &lt;li&gt;Magnitude of effect: Large vs. small.&lt;/li&gt;
  &lt;li&gt;Target of effect: Primary income vs. none.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is also heterogeneity in how different individuals respond to such changes
in income; some do not respond at all, while some increase spending to unsustainable levels.
I categorize response to income (assumed to be observed as changes in spending) as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Duration of response: Permanent vs. transient.&lt;/li&gt;
  &lt;li&gt;Direction of response: Positive vs. negative.&lt;/li&gt;
  &lt;li&gt;Magnitude of response: Large vs. small.&lt;/li&gt;
  &lt;li&gt;Target of response: Overall spending vs. specific product categories.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These categorizations are clearly coarse-grained: responses may be highly non-linear,
for example, starting out highly positive, then correcting themselves and going negative,
and finally stabilizing at zero. It is nevertheless useful to have some simple way to
categorize the wealth of research findings on this topic.&lt;/p&gt;

&lt;p&gt;Note that I restrict this study to that of income; hence, I assume away any effects of
non-income losses such as being the unfortunate victim of a street robbery. Such events would
definitely show up as expense fluctuations, so I may be better served by incorporating
hidden causes of expense modulation into my model.&lt;/p&gt;

&lt;p&gt;Why should we care about how people respond to income? The first motivation is to identify
individuals who may harm themselves financially in response to income shocks (I read that
over 70% of lottery winners go bankrupt). Once identified, planned income shocks to such
individuals (such as the disbursement of tax refunds or bonuses) could be spread out over
time to alleviate adverse responses. The second motivation is to guide setting the frequency
of pay in situations where there is a choice; my hypothesis is that different pay frequencies
lead to different levels of welfare for each individual, given that they respond to pay-days
in different ways. The third motivation is to better predict any given individual’s
future expense transactions (time and amount) from past transactions.&lt;/p&gt;

&lt;p&gt;What I have in my data are the times and amounts of income, the times and amounts of expenses
and a coarse product category for each purchase. I am also reasonably certain that this data
forms a “financial sensor log”: an involuntary and automatic stream of all the income and
expense transactions of every individual under study. This sets it apart from the previously
studied streams of voluntary actions, such as Foursquare check-ins and tweets, where multiple
layers of choice (the choice to eat, the choice to use Foursquare, the choice to check-in)
add barriers between observing the activity and making claims about natural human behaviour; as
a simple example, are Facebook “friends” friends? I think this difficulty in making claims on
human behaviour from such samples of observed activity is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Selection_bias&quot;&gt;selection bias&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, I will survey a number of papers studying the income elasticity of consumption.
The seeds of this literature review were planted by &lt;a href=&quot;http://www.andrew.cmu.edu/user/alm3/&quot;&gt;Alan Montgomery&lt;/a&gt; over at &lt;a href=&quot;http://tepper.cmu.edu/&quot;&gt;Tepper&lt;/a&gt; and
&lt;a href=&quot;https://www.andrew.cmu.edu/user/bkovak/&quot;&gt;Brian Kovak&lt;/a&gt; who taught me something awesome from 9.00am - 10.30am &lt;a href=&quot;http://www.heinz.cmu.edu/academic-resources/course-results/course-details/index.aspx?cid=587&quot;&gt;every&lt;/a&gt; &lt;a href=&quot;http://www.heinz.cmu.edu/academic-resources/course-results/course-details/index.aspx?cid=167&quot;&gt;morning&lt;/a&gt; this
semester.&lt;/p&gt;

</description>
				<pubDate>Sat, 12 Nov 2016 00:00:00 -0500</pubDate>
				<link>http://localhost:4000/blog/2016/11/12/responding-to-income/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2016/11/12/responding-to-income/</guid>
			</item>
		
			<item>
				<title>Spark Streaming Microbatch Metrics, Programmatically via the REST API</title>
				<description>&lt;p&gt;&lt;em&gt;TLDR; &lt;a href=&quot;https://gist.github.com/emaadmanzoor/cc12763a4133ca30fad8be065846ecc4&quot;&gt;metric collection script&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Spark Streaming web UI shows a number of interesting metrics over time.
&lt;a href=&quot;http://www3.cs.stonybrook.edu/~tnle/&quot;&gt;Tan&lt;/a&gt; and I were specifically interested
in the (micro)batch start times, processing times and scheduling delays, which we
could find no reported way of obtaining programmatically. We were running Spark
2.0.0 on YARN 2.7.2 in cluster-mode.&lt;/p&gt;

&lt;p&gt;All I could find with was this &lt;a href=&quot;http://stackoverflow.com/questions/34507578/how-to-fetch-spark-streaming-job-statistics-using-rest-calls-when-running-in-yar&quot;&gt;StackOverflow question&lt;/a&gt;
that suggested scraping the Spark UI webpage (as, horribly, &lt;a href=&quot;https://github.com/amitsing89/pythonscripts/blob/master/sparkMonitoring.py&quot;&gt;some have done&lt;/a&gt;)
or hitting the JSON API endpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/v1/&lt;/code&gt;. This endpoint, unfortunately again,
does not provide the same metrics we see on the Spark Streaming web UI.&lt;/p&gt;

&lt;p&gt;Not directly.&lt;/p&gt;

&lt;p&gt;It turns out that you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/jobs/&lt;/code&gt; endpoint to reconstruct the metrics you
see on the Spark Streaming web UI: the batch start time, processing delay and
scheduling delay. The key to how this reconstruction is done lies in the
&lt;a href=&quot;https://github.com/apache/spark/blob/d6dc12ef0146ae409834c78737c116050961f350/streaming/src/main/scala/org/apache/spark/streaming/scheduler/BatchInfo.scala&quot;&gt;BatchInfo class definition&lt;/a&gt; 
in the Spark codebase.&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;https://gist.github.com/emaadmanzoor/cc12763a4133ca30fad8be065846ecc4&quot;&gt;script&lt;/a&gt;
that parses the JSON from this endpoint and reconstructs these metrics, given the
application ID (the one YARN generates for you on submission) and the YARN master
URL. All times are in seconds. A sample execution is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python get_spark_streaming_batch_statistics.py &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt; ec2-52-40-144-150.us-west-2.compute.amazonaws.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--applicationId&lt;/span&gt; application_1469205272660_0006
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sample output (batch start-time, processing time, scheduling delay):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  18:36:55 3.991 3783.837
  18:36:56 4.001 3786.832
  18:36:57 3.949 3789.862
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script creates a map from each batch to its start time and all the jobs it
contains, along with the jobs’ start and completion times. Simple arithmetic then
generates the required metrics. It is easy to modify the script to print the
actual timestamps instead of the delay, if one wishes to.&lt;/p&gt;

&lt;p&gt;Do file an &lt;a href=&quot;https://github.com/lenhattan86/ccra/issues&quot;&gt;issue&lt;/a&gt; with any
questions or contributions you have.&lt;/p&gt;
</description>
				<pubDate>Fri, 22 Jul 2016 00:00:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2016/07/22/spark-streaming-statistics/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2016/07/22/spark-streaming-statistics/</guid>
			</item>
		
			<item>
				<title>Coffee on the North Fork</title>
				<description>&lt;p&gt;&lt;img src=&quot;/images/noforoco-front.jpg&quot; alt=&quot;North Fork Roasting Co.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I usually head west from Stony Brook every other weekend to work out of a
nice cafe in Manhattan or Brooklyn, but have become increasingly frustrated
with the tiny, crowded spaces that I’ve had to put up with. So this
weekend, I decided to head east to the &lt;a href=&quot;https://goo.gl/maps/n6qGY23Ggoz&quot;&gt;North Fork&lt;/a&gt;,
and was pleasantly surprised.&lt;/p&gt;

&lt;p&gt;I had been disappointed with the Long Island coffee scene in the recent past when
I visited &lt;a href=&quot;https://www.facebook.com/localscafe/&quot;&gt;Local’s cafe&lt;/a&gt; in Port Jefferson;
while quiet and spacy, there was something really wrong with either
the beans or the barista’s technique, making for a really flat, unexciting brew.
I wasn’t expecting much going all the way out to the east end of the island, but
I really wanted to find a local roaster to replenish my weekly beans supply.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.noforoastingco.com/&quot;&gt;NoFoRoCo&lt;/a&gt; blew me away from my first step in.
The cafe is set in a large old house, complete with rustic furniture and
a big dark house-dog. The couches are comfortable, the WiFi is good and the
staff is pleasant and interesting. There is a small door on the right side that
leads to a quaint study, with its own desk, armchair and vintage computing machinery.
The desk looks out onto the yard. You don’t get this in the cramped confines of
cafes in the City.&lt;/p&gt;

&lt;p&gt;Importantly, the coffee is perfect; I would rate this almost as good as
Blue Bottle, in terms of both the beans and technique
(a shoutout to &lt;a href=&quot;http://www.noforoastingco.com/say-hi.html&quot;&gt;Bri&lt;/a&gt;!). I had a latte
and a cappucino, and they only fell slightly short in the complexity of
flavours in the cup (Blue Bottle coffee bursts into a bunch of
interesting flavours on my tongue; that’s as eloquent as my amateur palate can get).
But there must be something to be said about NoFoRoCo being small-batch roasters.&lt;/p&gt;

&lt;p&gt;I’ll leave you with some pictures. I’ll definitely be visiting again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/noforoco-main.jpg&quot; alt=&quot;NoFoRoCo Main Room&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/noforoco-study.jpg&quot; alt=&quot;NoFoRoCo Study&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/noforoco-desk.jpg&quot; alt=&quot;NoFoRoCo Desk&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 24 Apr 2016 00:00:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2016/04/24/coffee-on-the-north-fork/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2016/04/24/coffee-on-the-north-fork/</guid>
			</item>
		
			<item>
				<title>Online Random Projections</title>
				<description>&lt;p&gt;&lt;img src=&quot;/images/streamhash-feature.jpg&quot; alt=&quot;feature&quot; /&gt;
I recently encountered the problem of computing the similarity of pairs of
“documents” (which, in my case, were actually graphs), where the documents
arrived as a stream of individual words. The incoming stream of words could both
initiate new documents and grow existing documents. Interestingly, the words of each
document could also arrive out-of-order, but I will ignore this complication for now.&lt;/p&gt;

&lt;p&gt;The problem then was to continuously compute and maintain the similarity of 
every pair of documents originating from the words in the stream. Strangely, I
could not find any existing methods to do this even for the case of a single
document pair, under the constraints of the data stream model (single-pass,
bounded memory). Specifically, all the methods I surveyed needed to know
my “vocabulary”: the unique words that could possibly arrive in the stream.
In my case, this is never known.&lt;/p&gt;

&lt;p&gt;In this post, I will describe the method I developed to tackle this problem,
while also discussing the background needed to understand why it works. The
method itself is fairly simple and, with some help from the code snippets in this
post, should be easy to implement and try out yourself!&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#computing-document-similarity&quot; id=&quot;markdown-toc-computing-document-similarity&quot;&gt;Computing Document Similarity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sketching-document-similarity&quot; id=&quot;markdown-toc-sketching-document-similarity&quot;&gt;Sketching Document Similarity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#streaming-document-similarity&quot; id=&quot;markdown-toc-streaming-document-similarity&quot;&gt;Streaming Document Similarity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#streaming-heterogenous-graph-similarity&quot; id=&quot;markdown-toc-streaming-heterogenous-graph-similarity&quot;&gt;Streaming Heterogenous Graph Similarity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computing-document-similarity&quot;&gt;Computing Document Similarity&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.google.com/drawings/d/1pypq-JElxpCNn12brQ1eW9XzD2NA0_td7aZGv7S6eyM/pub?w=1200&quot; alt=&quot;Cosine Distance&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;em&gt;&lt;strong&gt;Computing the cosine similarity of documents D1 and D2:&lt;/strong&gt; The documents are
first split into their constituent words and a vocabulary index is assigned to each
word. The documents are then represented by vectors of frequencies of the words they
contain. Given these vectors, their magnitudes, dot-product and cosine-similarity
can be computed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A common way to measure how similar two documents are is by their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine similarity&lt;/a&gt;. An example of this is illustrated
in the figure above. All documents in the collection are first split into
their constituent words, and a &lt;em&gt;vocabulary index&lt;/em&gt; is constructed which assigns
an integer to each unique word. If the vocabulary size is &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;, each document is
represented by a &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;-sized vector of frequencies of the words it contains.&lt;/p&gt;

&lt;p&gt;Given these vectors for a pair of documents, say &lt;strong&gt;D1&lt;/strong&gt; and &lt;strong&gt;D2&lt;/strong&gt;, their
magnitudes are given by,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
  magn(\mathbf{D1}) &amp;= \|\mathbf{D1}\|_2\\
  magn(\mathbf{D2}) &amp;= \|\mathbf{D2}\|_2,
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;and their cosine similarity is given by,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;sim(\mathbf{D1}, \mathbf{D2}) = cos(\mathbf{D1}, \mathbf{D2})
                                = \frac{\mathbf{D1} \cdot \mathbf{D2}}
                                       {\|\mathbf{D1}\|_2\|\mathbf{D2}\|_2}.&lt;/script&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;a-computational-problem-with-large-v&quot;&gt;A Computational Problem With Large |V|&lt;/h3&gt;

&lt;p&gt;In practice, it is possible for the
vocabulary to be extremely large. This increases the time needed to compute the
similarity of each document pair and the memory needed to store each document.
To address this issue, a popular approach is to &lt;em&gt;sketch&lt;/em&gt; the word-frequency vectors
that represent each document. Sketching replaces &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;-sized document vectors by
&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;-sized &lt;em&gt;sketch&lt;/em&gt; vectors, where &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; is much smaller than &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;, while accurately
approximating the similarity of pairs of documents.&lt;/p&gt;

&lt;h2 id=&quot;sketching-document-similarity&quot;&gt;Sketching Document Similarity&lt;/h2&gt;

&lt;p&gt;An approach to sketching vectors that preserves their cosine similarity is using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random_projection&quot;&gt;random projections&lt;/a&gt;, which applies some neat tricks from linear algebra and
probability.
Let’s say we want to compute the similarity of documents with vectors &lt;strong&gt;D1&lt;/strong&gt; and
&lt;strong&gt;D2&lt;/strong&gt; having angle θ between them. We can visualize these vectors in the XY-plane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.google.com/drawings/d/15MsVhJreASVW-VnJYCIYTUGNS93pEysOvwQ1jqsZdaU/pub?w=1200&quot; alt=&quot;Document Vectors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s pick a vector &lt;strong&gt;R&lt;/strong&gt; in the plane having the same size as &lt;strong&gt;D1&lt;/strong&gt; and
&lt;strong&gt;D2&lt;/strong&gt; uniformly at random in the plane. Then define a function &lt;em&gt;h&lt;/em&gt; that
operates on any such random vector &lt;strong&gt;R&lt;/strong&gt; and a document vector &lt;strong&gt;D&lt;/strong&gt; as follows:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
h_{\mathbf{R}}(\mathbf{D}) =
    \begin{cases}
      +1 ~\textrm{if}~ \mathbf{D}\cdot\mathbf{R} \geq 0,\\
      -1 ~\textrm{if}~ \mathbf{D}\cdot\mathbf{R} &lt; 0.
    \end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;So &lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R}}(\mathbf{D1}) = h_{\mathbf{R}}(\mathbf{D2})&lt;/script&gt; only if
both &lt;strong&gt;D1&lt;/strong&gt; and &lt;strong&gt;D2&lt;/strong&gt; lie on the same side of &lt;strong&gt;R&lt;/strong&gt;, and
&lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R}}(\mathbf{D1}) \neq h_{\mathbf{R}}(\mathbf{D2})&lt;/script&gt; otherwise.
Now what is the probability that
&lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R}}(\mathbf{D1}) = h_{\mathbf{R}}(\mathbf{D2})&lt;/script&gt;, over all random
choices of &lt;strong&gt;R&lt;/strong&gt;? It’s easier to see what this is with another illustration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.google.com/drawings/d/1b7SQPGmNJ3Ig_gRfFD0jsoDIaiLrqCMV5QUwIHBuh0w/pub?w=1200&quot; alt=&quot;Random Vectors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the red region, &lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R}}(\mathbf{D1}) \neq h_{\mathbf{R}}(\mathbf{D2})&lt;/script&gt;
since &lt;strong&gt;D1&lt;/strong&gt; and &lt;strong&gt;D2&lt;/strong&gt; will fall on opposite sides of any random vector &lt;strong&gt;R&lt;/strong&gt; chosen
in this region. Similarly,
&lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R}}(\mathbf{D1}) = h_{\mathbf{R}}(\mathbf{D2})&lt;/script&gt; in the yellow region.
The ratio of the areas of the red and yellow regions is &lt;em&gt;2θ/2π&lt;/em&gt;, leading to the
probability over random vectors &lt;strong&gt;R&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{\mathbf{R}}[h_{\mathbf{R}}(\mathbf{D1}) =  h_{\mathbf{R}}(\mathbf{D2})]
    = 1 - θ/π.&lt;/script&gt;

&lt;p&gt;If we could somehow estimate this probability, we could plug it into the above
equation to find the angle θ, and hence, find the cosine similarity of the two
document vectors:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{gather*}
  θ = π (1 - P_{\mathbf{R}}[h_{\mathbf{R}}(\mathbf{D1}) =
                              h_{\mathbf{R}}(\mathbf{D2})])\\
  sim(\mathbf{D1}, \mathbf{D2}) = cos(θ)
\end{gather*}&lt;/script&gt;

&lt;p&gt;It turns out that it’s easy to estimate this probability: simply pick &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; random
vectors &lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}_1, \dots, \mathbf{R}_k&lt;/script&gt;, evaluate
&lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R_i}}(\mathbf{D1})&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R_i}}(\mathbf{D2})&lt;/script&gt; for
each of these vectors and then count the fraction of function values for
which the two documents agree (i.e. function values are both +1 or both -1),&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{\mathbf{R}}[h_{\mathbf{R}}(\mathbf{D1}) = h_{\mathbf{R}}(\mathbf{D2})]
    \approx \frac{\sum_{i=1}^k \mathbb{1}(h_{\mathbf{R_i}}(\mathbf{D1}) =
                                          h_{\mathbf{R_i}}(\mathbf{D2}))}
                 {k}.&lt;/script&gt;

&lt;p&gt;In practice, the random vectors turn out to be sufficiently random if each
of their elements are chosen uniformly from &lt;script type=&quot;math/tex&quot;&gt;\{+1, -1\}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;By fixing a set of random vectors &lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}_1, \dots, \mathbf{R}_k&lt;/script&gt;,
every &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;-sized document vector &lt;strong&gt;D&lt;/strong&gt; can be replaced by a &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;-sized &lt;em&gt;sketch&lt;/em&gt;
vector, where element &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; of the sketch vector is either +1 or -1 and is given by
&lt;script type=&quot;math/tex&quot;&gt;h_{\mathbf{R_i}}(\mathbf{D})&lt;/script&gt;. Thus, each sketch vector is essentially a bit
vector and consumes very little space. Document similarity can then be estimated
using just these sketch vectors. The accuracy of estimation improves with increasing
&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;a-computational-problem-with-unknown-v&quot;&gt;A Computational Problem With Unknown |V|&lt;/h3&gt;

&lt;p&gt;Notice that in the random projections technique just described, we need to know
&lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt; to construct &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;-sized random vectors. In a streaming scenario, &lt;script type=&quot;math/tex&quot;&gt;|V|&lt;/script&gt;
is never known, and may grow with time!&lt;/p&gt;

&lt;h2 id=&quot;streaming-document-similarity&quot;&gt;Streaming Document Similarity&lt;/h2&gt;

&lt;p&gt;Let’s say we could pick &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; functions &lt;script type=&quot;math/tex&quot;&gt;h_1, \dots, h_k&lt;/script&gt; at random from a
family of functions &lt;script type=&quot;math/tex&quot;&gt;\mathcal{H}&lt;/script&gt;, where each &lt;script type=&quot;math/tex&quot;&gt;h \in \mathcal{H}&lt;/script&gt; maps a word
to an element of &lt;script type=&quot;math/tex&quot;&gt;\{+1, -1\}&lt;/script&gt;. Then we could replace each random vector
&lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}_i&lt;/script&gt; with a function &lt;script type=&quot;math/tex&quot;&gt;h_i \in \mathcal{H}&lt;/script&gt;, as long as &lt;script type=&quot;math/tex&quot;&gt;\mathcal{H}&lt;/script&gt;
obeys the following properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;It should be equally probable for a given word to map to +1 or -1, over
randomly chosen &lt;script type=&quot;math/tex&quot;&gt;h \in \mathcal{H}&lt;/script&gt;.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;This captures the equivalence of the function &lt;script type=&quot;math/tex&quot;&gt;h_i&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}_i&lt;/script&gt;
whose elements are each uniformly chosen from &lt;script type=&quot;math/tex&quot;&gt;\{+1, -1\}&lt;/script&gt;.&lt;/p&gt;

    &lt;p&gt;However, requiring only this property permits trival families such as
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{H} = \{h_1(w) = +1, ~h_2(w) = -1, \forall ~\textrm{words}~ w\}&lt;/script&gt;.
This family satisfies property (1) since the probability that any function randomly
picked from &lt;script type=&quot;math/tex&quot;&gt;\mathcal{H}&lt;/script&gt; maps a word to +1 or -1 is 1/2; note that the
randomness originates from picking the function and not from computing the
mapped value of a word. But each of the functions in this trivial family map
all words to the same value, which is not very useful.&lt;/p&gt;

    &lt;p&gt;So we need the following additional property:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;For a given &lt;script type=&quot;math/tex&quot;&gt;h \in \mathcal{H}&lt;/script&gt;, values in {+1, -1} are equally probable
over all words.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;This ensures that a function in the family cannot map all words to the same
value, and should evenly distribute the mapped values across all words between
+1 and -1. This still does not prevent families such as
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{H} = \{h_1(w), ~h_2(w) = -h_1(w), \forall ~\textrm{words}~ w\}&lt;/script&gt;
where &lt;script type=&quot;math/tex&quot;&gt;h_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;h_2&lt;/script&gt; both satisfy property (2). This family is not
very useful either, since the second function is correlated with the first.&lt;/p&gt;

    &lt;p&gt;This leads to our final desired property:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;All the functions in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{H}&lt;/script&gt; are pairwise-independent.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It turns out that a family satisfying these requirements is a
a &lt;em&gt;2-universal (strongly universal)&lt;/em&gt; hash function family by definition.
Many such families exist that work on strings. One example is the multilinear family:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h(w) = m_0 + \sum_{i = 1}^n m_i w_i,&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;w_i&lt;/script&gt; is the integer representation of the &lt;script type=&quot;math/tex&quot;&gt;i^\textrm{th}&lt;/script&gt; character of
the word &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;m_0, \dots, m_n&lt;/script&gt; are uniformly random integers. The
function above returns an integer, but this can be easily mapped to an element of
&lt;script type=&quot;math/tex&quot;&gt;\{+1, -1\}&lt;/script&gt; by extracting the MSB and some algebra.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;To sample &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; functions from the strongly-universal multilinear family, it is
only necessary to estimate the maximum word length &lt;script type=&quot;math/tex&quot;&gt;m = |w|_{\textrm{max}}&lt;/script&gt;.
Then, for each function &lt;script type=&quot;math/tex&quot;&gt;h_1, \dots, h_k&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;m + 1&lt;/script&gt; random integers are generated
and stored.&lt;/p&gt;

&lt;p&gt;The following C++ 11 snippet initializes &lt;script type=&quot;math/tex&quot;&gt;h_1, \dots, h_k&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; hash functions
sampled uniformly at random from the multilinear family:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;random&amp;gt;
#define SEED 42
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mt19937_64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Mersenne Twister 64-bit PRNG */&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* m = maximum word length, k = number of hash functions */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Then the mapping for a word &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt; using &lt;script type=&quot;math/tex&quot;&gt;h_i&lt;/script&gt; can be computed as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* w is a string of length &amp;lt;= m */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Notice the bitwise-and when computing the summation: this is to take care of the
sign-extension performed when a 1-byte character is cast to a 4-byte unsigned
integer.&lt;/p&gt;

&lt;h2 id=&quot;streaming-heterogenous-graph-similarity&quot;&gt;Streaming Heterogenous Graph Similarity&lt;/h2&gt;

&lt;p&gt;The technique described above was used to perform streaming clustering and anomaly
detection on heterogenous graphs, where the graphs were arriving as a stream of
individual edges. Further details are available in the paper and code at the
&lt;a href=&quot;http://www3.cs.stonybrook.edu/~emanzoor/streamspot&quot;&gt;project website&lt;/a&gt;.&lt;/p&gt;

</description>
				<pubDate>Thu, 25 Feb 2016 00:00:00 -0500</pubDate>
				<link>http://localhost:4000/blog/2016/02/25/streaming-random-projections/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2016/02/25/streaming-random-projections/</guid>
			</item>
		
			<item>
				<title>On Profanity in Science</title>
				<description>&lt;p&gt;I came across a slightly old paper on &lt;a href=&quot;http://www.sigkdd.org/sites/default/files/issues/14-2-2012-12/V14-02-07-Cormode.pdf&quot;&gt;Studying the Source Code of Scientific Research&lt;/a&gt;. The section on &lt;em&gt;The Sacred and the Profane&lt;/em&gt; had me in fits. It reminded me of the less academic but equally hilarous analogue from software development: &lt;a href=&quot;http://www.commitlogsfromlastnight.com/&quot;&gt;Commit Logs from Last Night&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quoted below for memory:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In other cases however, it seems that profanity is used internally
to reflect the author’s true feelings: there are examples
where a particularly difficult example is given the (internal)
label “bastard”; a macro for a complexity class is given the
handle “crap”; and an initial theorem is labeled “bullshit”
with an improvement provided.&lt;/p&gt;

  &lt;p&gt;One particular notable example
is of the occurrence of “bollocks” (a British-English
idiom with broadly negative connotation) which occurs over
fifty times within a single paper. Closer inspection reveals
that this is because the central theorem in the paper is
given the label “dogs-bollocks” and referred to extensively
throughout; this phrase is a (coarse) British-English idiom
with a strongly &lt;em&gt;positive&lt;/em&gt; connotation.&lt;/p&gt;

  &lt;p&gt;There are examples of profanity used in comments: the observation that “the \thanks layout looks crappy!”; the single word “bullshit”
prefacing some technical text which has been commented
out; and the comment “Who the fuck is —?” immediately
after an acknowledgment to the named individual.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rest of the paper is as enjoyable and illuminating; a rare combination, but coming from Muthukrishnan (depicted below on fire), possibly expected.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.rutgers.edu/~muthu/&quot;&gt;&lt;img src=&quot;http://www.cs.rutgers.edu/~muthu/onfire.jpg&quot; alt=&quot;Muthukrishnan on fire&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 02 May 2015 00:00:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2015/05/02/on-profanity-in-science/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2015/05/02/on-profanity-in-science/</guid>
			</item>
		
			<item>
				<title>Setting up the Oculus Rift.</title>
				<description>&lt;p&gt;More cables than I expected. Also uses up all my USB ports! &lt;img src=&quot;/images/dk2_box.jpg&quot; alt=&quot;DK2 Setup&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Apr 2015 06:37:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2015/04/05/setting-up-the-oculus-rift/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2015/04/05/setting-up-the-oculus-rift/</guid>
			</item>
		
			<item>
				<title>Interesting seminar by Jia Yuan Yu.</title>
				<description>&lt;p&gt;From Dublin City U. See also: dublinked.ie. Bringing in congestion control methods from TCP to resource allocation in smart cities while maintaining agent privacy. An exciting connection, useful theorems and many open problems!&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Apr 2015 06:00:00 -0400</pubDate>
				<link>http://localhost:4000/blog/2015/04/05/interesting-seminar-by-jia-yuan-yu/</link>
				<guid isPermaLink="true">http://localhost:4000/blog/2015/04/05/interesting-seminar-by-jia-yuan-yu/</guid>
			</item>
		
	</channel>
</rss>
